import net.darkhax.curseforgegradle.TaskPublishCurseForge
import com.modrinth.minotaur.TaskModrinthUpload

import java.util.stream.Collectors
plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "net.darkhax.curseforgegradle" version "1.1.18"
    id "com.modrinth.minotaur" version "2.+"
    id "net.minecraftforge.gradle" version "[6.0,6.2.)"
    id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
}

tasks.build.dependsOn(shadowJar)

configurations {
    shadow
    minecraftLibrary.extendsFrom shadow

    dataImplementation.extendsFrom implementation
    dataCompileOnly.extendsFrom compileOnly
}

sourceSets {
    data
}

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

shadowJar {
    configurations = [project.configurations.shadow]
    relocate 'blue.endless.jankson', "${project.group}.shadow.blue.endless.jankson"

    relocate "org.objectweb.asm", "${project.group}.lib.asm"
    relocate "org.lwjgl.opencl", "${project.group}.lib.opencl"

    relocate "io.github.spair:imgui-java-binding:$imgui_version", "${project.group}.relocated.imgui-java-binding"
    relocate "io.github.spair:imgui-java-lwjgl3:$imgui_version", "${project.group}.relocated.imgui-java-lwjgl3"
    relocate "io.github.spair:imgui-java-natives-linux:$imgui_version", "${project.group}.relocated.imgui-java-natives-linux"
    relocate "io.github.spair:imgui-java-natives-windows:$imgui_version", "${project.group}.relocated.imgui-java-natives-windows"
    relocate "io.github.spair:imgui-java-natives-macos:$imgui_version", "${project.group}.relocated.imgui-java-natives-macos"
    archiveClassifier.set('')
}
reobf {
    shadowJar {
    }
}

minecraft {
    mappings channel: 'parchment', version: "${minecraft_version}-${parchment_version}-${minecraft_version}"

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        def runArgs = []
        client {
            jvmArgs runArgs
            workingDirectory project.file('run')
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            def output = sourceSets.main.output
            def commonOutput = project(":Common").sourceSets.main.output
            environment("MOD_CLASSES", [output.classesDirs.asPath, output.resourcesDir.path, commonOutput.classesDirs.asPath, commonOutput.resourcesDir.path].join(";"))

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            jvmArgs runArgs
            workingDirectory project.file('run')
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            def output = sourceSets.main.output
            def commonOutput = project(":Common").sourceSets.main.output
            environment("MOD_CLASSES", [output.classesDirs.asPath, output.resourcesDir.path, commonOutput.classesDirs.asPath, commonOutput.resourcesDir.path].join(";"))

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            jvmArgs runArgs
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', project(':Common').file('src/generated/resources'), '--existing', project(':Common').file('src/main/resources'), "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            taskName 'Data'
            def output = sourceSets.main.output
            def commonOutput = project(":Common").sourceSets.main.output
            environment("MOD_CLASSES", [output.classesDirs.asPath, sourceSets.data.output.asPath, output.resourcesDir.path, commonOutput.classesDirs.asPath, commonOutput.resourcesDir.path].join(";"))

            mods {
                modDataRun {
                    source sourceSets.main as SourceSet
                    source sourceSets.data as SourceSet
                    source project(":Common").sourceSets.main as SourceSet
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    minecraftLibrary shadow("blue.endless:jankson:${jankson_version}")
    dataImplementation sourceSets.main.output

     minecraftLibrary shadow("io.github.spair:imgui-java-binding:$imgui_version")
     minecraftLibrary shadow("io.github.spair:imgui-java-lwjgl3:$imgui_version") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

     minecraftLibrary shadow("io.github.spair:imgui-java-natives-linux:$imgui_version")
     //minecraftLibrary shadow("io.github.spair:imgui-java-natives-macos:$imgui_version")
     minecraftLibrary shadow("io.github.spair:imgui-java-natives-windows:$imgui_version")

}
reg.configureJarTask(shadowJar)

mixin {
    add project(":Common").sourceSets.main, "${mod_id}.refmap.json"
    add sourceSets.main, "${mod_id}.forge.refmap.json"

    config "${mod_id}.mixins.json"
    config "${mod_id}.forge.mixins.json"
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources

    filesMatching("${mod_id}.mixins.json") {
        expand "refmap_target": "${mod_id}."
    }
    exclude '.cache/**'

    exclude('data/c/tags/**')
    exclude('data/fabric/tags/**')
}

jar {
    finalizedBy('reobfJar')
    archiveClassifier.set('slim')
}

task forge_checkForRefmap() {
    doLast {
        File file1 = shadowJar.archiveFile.get().asFile
        logger.info("Verifying refmap exists...")
        if (file1.exists()) {
            FileTree files = zipTree(file1)
            Set<String> fileNames = files.getFiles().stream().map(file -> file.getName()).collect(Collectors.toSet())

            String forgeRefmap = "${mod_id}.forge.refmap.json"
            String commonRefmap = "${mod_id}.refmap.json"
            if (!fileNames.contains(forgeRefmap) || !fileNames.contains(commonRefmap)) {
                throw new IllegalStateException("Refmap is missing.")
            }
        } else {
            throw new IllegalStateException("File is missing.")
        }
        logger.info("Refmap found!")
    }
}

task forge_publishCurseForge(type: TaskPublishCurseForge) {
    apiToken = "$System.env.CURSEFORGE_KEY"
    int projectId = Integer.parseInt("${project.forge_curseforge_id}")
    String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

    def mainFile = upload(projectId, shadowJar)
    mainFile.changelog = changelogText
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "${project.release_type}"
    mainFile.addGameVersion("${project.minecraft_version}")
    mainFile.addModLoader("forge", "neoforge")
}


String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

// Make sure it runs after build!
task forge_publishModrinth (type: TaskModrinthUpload){
    modrinth {
        token = "$System.env.MODRINTH_KEY"
        projectId = "${project.modrinth_id}"
        versionName = "${archivesBaseName}-${project.version}"
        versionNumber = "${project.minecraft_version}-${project.version}-forge"
        versionType = "${project.release_type}"
        uploadFile = shadowJar
        changelog = changelogText
        gameVersions = ["${project.minecraft_version}"]
        loaders = ['forge', 'neoforge']
    }
}

task forge_buildAndReleaseCurseforge {}
tasks.forge_checkForRefmap.mustRunAfter tasks.build
tasks.forge_publishCurseForge.mustRunAfter tasks.forge_checkForRefmap
tasks.forge_buildAndReleaseCurseforge.dependsOn(tasks.build, tasks.forge_checkForRefmap, tasks.forge_publishCurseForge)

task forge_buildAndReleaseModrinth {}
tasks.forge_checkForRefmap.mustRunAfter tasks.build
tasks.forge_publishModrinth.mustRunAfter tasks.forge_checkForRefmap
tasks.forge_buildAndReleaseModrinth.dependsOn(tasks.build, tasks.forge_checkForRefmap, tasks.forge_publishModrinth)

task forge_buildAndReleaseModrinthAndCurseforge {}
tasks.forge_checkForRefmap.mustRunAfter tasks.build
tasks.forge_publishCurseForge.mustRunAfter tasks.forge_checkForRefmap
tasks.forge_publishModrinth.mustRunAfter tasks.forge_publishCurseForge
tasks.forge_buildAndReleaseModrinthAndCurseforge.dependsOn(tasks.build, tasks.forge_checkForRefmap, tasks.forge_publishCurseForge, tasks.forge_publishModrinth)